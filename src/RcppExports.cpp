// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// isParent
bool isParent(NumericMatrix G, int x, int y);
RcppExport SEXP _adjset_isParent(SEXP GSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(isParent(G, x, y));
    return rcpp_result_gen;
END_RCPP
}
// isChild
bool isChild(NumericMatrix G, int x, int y);
RcppExport SEXP _adjset_isChild(SEXP GSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(isChild(G, x, y));
    return rcpp_result_gen;
END_RCPP
}
// areDescendants
LogicalVector areDescendants(NumericMatrix G, IntegerVector nodes);
RcppExport SEXP _adjset_areDescendants(SEXP GSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(areDescendants(G, nodes));
    return rcpp_result_gen;
END_RCPP
}
// areAncestors
LogicalVector areAncestors(NumericMatrix G, IntegerVector nodes);
RcppExport SEXP _adjset_areAncestors(SEXP GSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(areAncestors(G, nodes));
    return rcpp_result_gen;
END_RCPP
}
// isDescendant
bool isDescendant(NumericMatrix G, int x, int y);
RcppExport SEXP _adjset_isDescendant(SEXP GSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(isDescendant(G, x, y));
    return rcpp_result_gen;
END_RCPP
}
// areReachable
LogicalVector areReachable(NumericMatrix G, int x, IntegerVector Z, LogicalVector A);
RcppExport SEXP _adjset_areReachable(SEXP GSEXP, SEXP xSEXP, SEXP ZSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(areReachable(G, x, Z, A));
    return rcpp_result_gen;
END_RCPP
}
// find_nearest_adjset
IntegerVector find_nearest_adjset(NumericMatrix Gx, int x, IntegerVector Z, LogicalVector A);
RcppExport SEXP _adjset_find_nearest_adjset(SEXP GxSEXP, SEXP xSEXP, SEXP ZSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Gx(GxSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(find_nearest_adjset(Gx, x, Z, A));
    return rcpp_result_gen;
END_RCPP
}
// find_adjset
IntegerVector find_adjset(NumericMatrix G, int x, int y, String name, NumericMatrix dmat, NumericMatrix Gx);
RcppExport SEXP _adjset_find_adjset(SEXP GSEXP, SEXP xSEXP, SEXP ySEXP, SEXP nameSEXP, SEXP dmatSEXP, SEXP GxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< String >::type name(nameSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gx(GxSEXP);
    rcpp_result_gen = Rcpp::wrap(find_adjset(G, x, y, name, dmat, Gx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_adjset_isParent", (DL_FUNC) &_adjset_isParent, 3},
    {"_adjset_isChild", (DL_FUNC) &_adjset_isChild, 3},
    {"_adjset_areDescendants", (DL_FUNC) &_adjset_areDescendants, 2},
    {"_adjset_areAncestors", (DL_FUNC) &_adjset_areAncestors, 2},
    {"_adjset_isDescendant", (DL_FUNC) &_adjset_isDescendant, 3},
    {"_adjset_areReachable", (DL_FUNC) &_adjset_areReachable, 4},
    {"_adjset_find_nearest_adjset", (DL_FUNC) &_adjset_find_nearest_adjset, 4},
    {"_adjset_find_adjset", (DL_FUNC) &_adjset_find_adjset, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_adjset(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
