if (!adjset == "pa" && is.null(dmats)) dmats <- lapply(dags, bida:::descendants.matrix)
lapply(x,
function(xx) lapply(y[!y == xx],
function(yy) adjset_support_from_dags_pairwise(adjset, dags, w, xx, yy, dmats)))
}
adjset_support_from_dags_pairwise <- function(adjset,
dags,
w,
x,
y,
dmats,
replace_large_adjset = NULL) {
n    <- ncol(dags[[1]])
if (adjset == "pa") {
sets <- lapply(dags, function(dag) seq_len(n)[dag[, x] == 1])
} else {
yIsDescendant <- vapply(dmats, function(m) m[[x+n*(y-1)]], numeric(1)) == 1
if (!any(yIsDescendant)) {
# set (unique) adjustment set equal to y, indicating no effect from x to y
sets <- list(y)
w    <- 1
} else {
# list adjustment sets in DAGs where y is descendant of x
tmp  <- mapply(function(dag, dmat) adjset::find_adjset(dag, x-1, y-1, adjset, dmat)+1,
dag = dags[yIsDescendant],
dmat = dmats[yIsDescendant],
SIMPLIFY = FALSE)
sets <- c(list(y), tmp)
w    <- c(sum(w[!yIsDescendant]), w[yIsDescendant])
}
}
adjset_support  <- frequency_table(sets, w)
if (!is.null(replace_large_adjset)) {
sets <- lapply(adjset_support[[1]], function(z) replace_large_adjset(x, y, z, adjset))
adjset_support <- frequency_table(sets, adjset_support[[2]])
}
return(adjset_support)
}
#' @rdname adjset_support_from_dags
dag_support <- function(dags, w = rep(1/length(dags), length(dags))) {
frequency_table(lapply(dags, as.matrix), w)
}
frequency_table <- function(x, w = rep(1/length(x), length(x))) {
u <- unique(x)
list(x = u, w = bida:::rowsum_fast(w, x, u))
}
find_sets_implying_zeroeff <- function(setsupp, y) {
if (!is.null(setsupp$zeroprob)) return(setsupp)
sets <- setsupp$sets
p    <- setsupp$p
indx <- vapply(sets, any(sets == y), logical(1))
if (any(indx)) {
zeroprob  = sum(p[indx])
list(sets = list(y, sets[!indx]),
p = c(zeroprob, p[!indx]),
zeroprob = zeroprob)
} else {
c(setsupp, zeroprob = list(0))
}
}
files <- list.files("./MCMC/", "alarm", full.names = T)
f <- files[1]
imp <- readRDS(f)
#' Compute support of adjustment set
#'
#' Identify the set of unique adjustment sets in a sample of DAGs.
#'
#' @param dags (list) a sample of dags
#' @param p (numeric vector) a vector of length
#' @param x,y (integer vector) column position(s) of cause and effect variable(s), respectively
#' @param adjset (character) name of adjustment set. See [adjset::find_adjset()].
#' @param dmats (optional) list of matrices representing the ancestral relationships
#'  in each `ds$dags`. If not specified, [bida:::descendants()] is called for each
#'  dag.
#'
#' @example
#'
#' data(bida_example_data)
#' dags <- bida_example_data$dags
#' ps   <- dag_support(dags)
#' adjset_support <- adjset_support_from_dags("pa", ps[[1]], ps[[2]], y = 0)
adjset_support_from_dags <- function(adjset, dags, w, x = NULL, y = NULL, dmats = NULL) {
n <- ncol(dags[[1]])
varnames <- colnames(dags[[1]])
if (is.null(varnames)) varnames <- paste0("X", seq_len(n))
if (is.null(x)) x <- seq_len(n)
if (!is.character(x)) names(x) <- varnames[x]
if (is.null(y)) y <- seq_len(n)
if (!is.character(y)) names(y) <- varnames[y]
if (!adjset == "pa" && is.null(dmats)) dmats <- lapply(dags, bida:::descendants.matrix)
lapply(x,
function(xx) lapply(y[!y == xx],
function(yy) adjset_support_from_dags_pairwise(adjset, dags, w, xx, yy, dmats)))
}
adjset_support_from_dags_pairwise <- function(adjset,
dags,
w,
x,
y,
dmats,
replace_large_adjset = NULL) {
n    <- ncol(dags[[1]])
if (adjset == "pa") {
sets <- lapply(dags, function(dag) seq_len(n)[dag[, x] == 1])
} else {
yIsDescendant <- vapply(dmats, function(m) m[[x+n*(y-1)]], numeric(1)) == 1
if (!any(yIsDescendant)) {
# set (unique) adjustment set equal to y, indicating no effect from x to y
sets <- list(y)
w    <- 1
} else {
# list adjustment sets in DAGs where y is descendant of x
tmp  <- mapply(function(dag, dmat) adjset::find_adjset(dag, x-1, y-1, adjset, dmat)+1,
dag = dags[yIsDescendant],
dmat = dmats[yIsDescendant],
SIMPLIFY = FALSE)
sets <- c(list(y), tmp)
w    <- c(sum(w[!yIsDescendant]), w[yIsDescendant])
}
}
adjset_support  <- frequency_table(sets, w)
if (!is.null(replace_large_adjset)) {
sets <- lapply(adjset_support[[1]], function(z) replace_large_adjset(x, y, z, adjset))
adjset_support <- frequency_table(sets, adjset_support[[2]])
}
return(adjset_support)
}
#' @rdname adjset_support_from_dags
dag_support <- function(dags, w = rep(1/length(dags), length(dags))) {
frequency_table(lapply(dags, as.matrix), w)
}
frequency_table <- function(x, w = rep(1/length(x), length(x))) {
u <- unique(x)
list(x = u, w = bida:::rowsum_fast(w, x, u))
}
find_sets_implying_zeroeff <- function(setsupp, y) {
if (!is.null(setsupp$zeroprob)) return(setsupp)
sets <- setsupp$sets
p    <- setsupp$p
indx <- vapply(sets, any(sets == y), logical(1))
if (any(indx)) {
zeroprob  = sum(p[indx])
list(sets = list(y, sets[!indx]),
p = c(zeroprob, p[!indx]),
zeroprob = zeroprob)
} else {
c(setsupp, zeroprob = list(0))
}
}
files <- list.files("./MCMC/", "alarm", full.names = T)
f <- files[1]
imp <- readRDS(f)
#' Compute support of adjustment set
#'
#' Identify the set of unique adjustment sets in a sample of DAGs.
#'
#' @param dags (list) a sample of dags
#' @param p (numeric vector) a vector of length
#' @param x,y (integer vector) column position(s) of cause and effect variable(s), respectively
#' @param adjset (character) name of adjustment set. See [adjset::find_adjset()].
#' @param dmats (optional) list of matrices representing the ancestral relationships
#'  in each `ds$dags`. If not specified, [bida:::descendants()] is called for each
#'  dag.
#'
#' @example
#'
#' data(bida_example_data)
#' dags <- bida_example_data$dags
#' ps   <- dag_support(dags)
#' adjset_support <- adjset_support_from_dags("pa", ps[[1]], ps[[2]], y = 0)
adjset_support_from_dags <- function(adjset, dags, w, x = NULL, y = NULL, dmats = NULL) {
n <- ncol(dags[[1]])
varnames <- colnames(dags[[1]])
if (is.null(varnames)) varnames <- paste0("X", seq_len(n))
if (is.null(x)) x <- seq_len(n)
if (!is.character(x)) names(x) <- varnames[x]
if (is.null(y)) y <- seq_len(n)
if (!is.character(y)) names(y) <- varnames[y]
if (!adjset == "pa" && is.null(dmats)) dmats <- lapply(dags, bida:::descendants.matrix)
lapply(x,
function(xx) lapply(y[!y == xx],
function(yy) adjset_support_from_dags_pairwise(adjset, dags, w, xx, yy, dmats)))
}
adjset_support_from_dags_pairwise <- function(adjset,
dags,
w,
x,
y,
dmats,
replace_large_adjset = NULL) {
n    <- ncol(dags[[1]])
if (adjset == "pa") {
sets <- lapply(dags, function(dag) seq_len(n)[dag[, x] == 1])
} else {
yIsDescendant <- vapply(dmats, function(m) m[[x+n*(y-1)]], numeric(1)) == 1
if (!any(yIsDescendant)) {
# set (unique) adjustment set equal to y, indicating no effect from x to y
sets <- list(y)
w    <- 1
} else {
# list adjustment sets in DAGs where y is descendant of x
tmp  <- mapply(function(dag, dmat) adjset::find_adjset(dag, x-1, y-1, adjset, dmat)+1,
dag = dags[yIsDescendant],
dmat = dmats[yIsDescendant],
SIMPLIFY = FALSE)
sets <- c(list(y), tmp)
w    <- c(sum(w[!yIsDescendant]), w[yIsDescendant])
}
}
adjset_support  <- frequency_table(sets, w)
if (!is.null(replace_large_adjset)) {
sets <- lapply(adjset_support[[1]], function(z) replace_large_adjset(x, y, z, adjset))
adjset_support <- frequency_table(sets, adjset_support[[2]])
}
return(adjset_support)
}
#' @rdname adjset_support_from_dags
dag_support <- function(dags, w = rep(1/length(dags), length(dags))) {
frequency_table(lapply(dags, as.matrix), w)
}
frequency_table <- function(x, w = rep(1/length(x), length(x))) {
u <- unique(x)
list(x = u, w = bida:::rowsum_fast(w, x, u))
}
find_sets_implying_zeroeff <- function(setsupp, y) {
if (!is.null(setsupp$zeroprob)) return(setsupp)
sets <- setsupp$sets
p    <- setsupp$p
indx <- vapply(sets, any(sets == y), logical(1))
if (any(indx)) {
zeroprob  = sum(p[indx])
list(sets = list(y, sets[!indx]),
p = c(zeroprob, p[!indx]),
zeroprob = zeroprob)
} else {
c(setsupp, zeroprob = list(0))
}
}
files <- list.files("./MCMC/", "alarm", full.names = T)
f <- files[1]
imp <- readRDS(f)
getwd()
files <- list.files("./MCMC/", "alarm", full.names = T)
files
#' Compute support of adjustment set
#'
#' Identify the set of unique adjustment sets in a sample of DAGs.
#'
#' @param dags (list) a sample of dags
#' @param p (numeric vector) a vector of length
#' @param x,y (integer vector) column position(s) of cause and effect variable(s), respectively
#' @param adjset (character) name of adjustment set. See [adjset::find_adjset()].
#' @param dmats (optional) list of matrices representing the ancestral relationships
#'  in each `ds$dags`. If not specified, [bida:::descendants()] is called for each
#'  dag.
#'
#' @example
#'
#' data(bida_example_data)
#' dags <- bida_example_data$dags
#' ps   <- dag_support(dags)
#' adjset_support <- adjset_support_from_dags("pa", ps[[1]], ps[[2]], y = 0)
adjset_support_from_dags <- function(adjset, dags, w, x = NULL, y = NULL, dmats = NULL) {
n <- ncol(dags[[1]])
varnames <- colnames(dags[[1]])
if (is.null(varnames)) varnames <- paste0("X", seq_len(n))
if (is.null(x)) x <- seq_len(n)
if (!is.character(x)) names(x) <- varnames[x]
if (is.null(y)) y <- seq_len(n)
if (!is.character(y)) names(y) <- varnames[y]
if (!adjset == "pa" && is.null(dmats)) dmats <- lapply(dags, bida:::descendants.matrix)
lapply(x,
function(xx) lapply(y[!y == xx],
function(yy) adjset_support_from_dags_pairwise(adjset, dags, w, xx, yy, dmats)))
}
adjset_support_from_dags_pairwise <- function(adjset,
dags,
w,
x,
y,
dmats,
replace_large_adjset = NULL) {
n    <- ncol(dags[[1]])
if (adjset == "pa") {
sets <- lapply(dags, function(dag) seq_len(n)[dag[, x] == 1])
} else {
yIsDescendant <- vapply(dmats, function(m) m[[x+n*(y-1)]], numeric(1)) == 1
if (!any(yIsDescendant)) {
# set (unique) adjustment set equal to y, indicating no effect from x to y
sets <- list(y)
w    <- 1
} else {
# list adjustment sets in DAGs where y is descendant of x
tmp  <- mapply(function(dag, dmat) adjset::find_adjset(dag, x-1, y-1, adjset, dmat)+1,
dag = dags[yIsDescendant],
dmat = dmats[yIsDescendant],
SIMPLIFY = FALSE)
sets <- c(list(y), tmp)
w    <- c(sum(w[!yIsDescendant]), w[yIsDescendant])
}
}
adjset_support  <- frequency_table(sets, w)
if (!is.null(replace_large_adjset)) {
sets <- lapply(adjset_support[[1]], function(z) replace_large_adjset(x, y, z, adjset))
adjset_support <- frequency_table(sets, adjset_support[[2]])
}
return(adjset_support)
}
#' @rdname adjset_support_from_dags
dag_support <- function(dags, w = rep(1/length(dags), length(dags))) {
frequency_table(lapply(dags, as.matrix), w)
}
frequency_table <- function(x, w = rep(1/length(x), length(x))) {
u <- unique(x)
list(x = u, w = bida:::rowsum_fast(w, x, u))
}
find_sets_implying_zeroeff <- function(setsupp, y) {
if (!is.null(setsupp$zeroprob)) return(setsupp)
sets <- setsupp$sets
p    <- setsupp$p
indx <- vapply(sets, any(sets == y), logical(1))
if (any(indx)) {
zeroprob  = sum(p[indx])
list(sets = list(y, sets[!indx]),
p = c(zeroprob, p[!indx]),
zeroprob = zeroprob)
} else {
c(setsupp, zeroprob = list(0))
}
}
files <- list.files("./MCMC/", "alarm", full.names = T)
f <- files[1]
imp <- readRDS(f)
#' Compute support of adjustment set
#'
#' Identify the set of unique adjustment sets in a sample of DAGs.
#'
#' @param dags (list) a sample of dags
#' @param p (numeric vector) a vector of length
#' @param x,y (integer vector) column position(s) of cause and effect variable(s), respectively
#' @param adjset (character) name of adjustment set. See [adjset::find_adjset()].
#' @param dmats (optional) list of matrices representing the ancestral relationships
#'  in each `ds$dags`. If not specified, [bida:::descendants()] is called for each
#'  dag.
#'
#' @example
#'
#' data(bida_example_data)
#' dags <- bida_example_data$dags
#' ps   <- dag_support(dags)
#' adjset_support <- adjset_support_from_dags("pa", ps[[1]], ps[[2]], y = 0)
adjset_support_from_dags <- function(adjset, dags, w, x = NULL, y = NULL, dmats = NULL) {
n <- ncol(dags[[1]])
varnames <- colnames(dags[[1]])
if (is.null(varnames)) varnames <- paste0("X", seq_len(n))
if (is.null(x)) x <- seq_len(n)
if (!is.character(x)) names(x) <- varnames[x]
if (is.null(y)) y <- seq_len(n)
if (!is.character(y)) names(y) <- varnames[y]
if (!adjset == "pa" && is.null(dmats)) dmats <- lapply(dags, bida:::descendants.matrix)
lapply(x,
function(xx) lapply(y[!y == xx],
function(yy) adjset_support_from_dags_pairwise(adjset, dags, w, xx, yy, dmats)))
}
adjset_support_from_dags_pairwise <- function(adjset,
dags,
w,
x,
y,
dmats,
replace_large_adjset = NULL) {
n    <- ncol(dags[[1]])
if (adjset == "pa") {
sets <- lapply(dags, function(dag) seq_len(n)[dag[, x] == 1])
} else {
yIsDescendant <- vapply(dmats, function(m) m[[x+n*(y-1)]], numeric(1)) == 1
if (!any(yIsDescendant)) {
# set (unique) adjustment set equal to y, indicating no effect from x to y
sets <- list(y)
w    <- 1
} else {
# list adjustment sets in DAGs where y is descendant of x
tmp  <- mapply(function(dag, dmat) adjset::find_adjset(dag, x-1, y-1, adjset, dmat)+1,
dag = dags[yIsDescendant],
dmat = dmats[yIsDescendant],
SIMPLIFY = FALSE)
sets <- c(list(y), tmp)
w    <- c(sum(w[!yIsDescendant]), w[yIsDescendant])
}
}
adjset_support  <- frequency_table(sets, w)
if (!is.null(replace_large_adjset)) {
sets <- lapply(adjset_support[[1]], function(z) replace_large_adjset(x, y, z, adjset))
adjset_support <- frequency_table(sets, adjset_support[[2]])
}
return(adjset_support)
}
#' @rdname adjset_support_from_dags
dag_support <- function(dags, w = rep(1/length(dags), length(dags))) {
frequency_table(lapply(dags, as.matrix), w)
}
frequency_table <- function(x, w = rep(1/length(x), length(x))) {
u <- unique(x)
list(x = u, w = bida:::rowsum_fast(w, x, u))
}
find_sets_implying_zeroeff <- function(setsupp, y) {
if (!is.null(setsupp$zeroprob)) return(setsupp)
sets <- setsupp$sets
p    <- setsupp$p
indx <- vapply(sets, any(sets == y), logical(1))
if (any(indx)) {
zeroprob  = sum(p[indx])
list(sets = list(y, sets[!indx]),
p = c(zeroprob, p[!indx]),
zeroprob = zeroprob)
} else {
c(setsupp, zeroprob = list(0))
}
}
files <- list.files("./MCMC/", "alarm", full.names = T)
f <- files[1]
imp <- readRDS(f)
#' Compute support of adjustment set
#'
#' Identify the set of unique adjustment sets in a sample of DAGs.
#'
#' @param dags (list) a sample of dags
#' @param p (numeric vector) a vector of length
#' @param x,y (integer vector) column position(s) of cause and effect variable(s), respectively
#' @param adjset (character) name of adjustment set. See [adjset::find_adjset()].
#' @param dmats (optional) list of matrices representing the ancestral relationships
#'  in each `ds$dags`. If not specified, [bida:::descendants()] is called for each
#'  dag.
#'
#' @example
#'
#' data(bida_example_data)
#' dags <- bida_example_data$dags
#' ps   <- dag_support(dags)
#' adjset_support <- adjset_support_from_dags("pa", ps[[1]], ps[[2]], y = 0)
adjset_support_from_dags <- function(adjset, dags, w, x = NULL, y = NULL, dmats = NULL) {
n <- ncol(dags[[1]])
varnames <- colnames(dags[[1]])
if (is.null(varnames)) varnames <- paste0("X", seq_len(n))
if (is.null(x)) x <- seq_len(n)
if (!is.character(x)) names(x) <- varnames[x]
if (is.null(y)) y <- seq_len(n)
if (!is.character(y)) names(y) <- varnames[y]
if (!adjset == "pa" && is.null(dmats)) dmats <- lapply(dags, bida:::descendants.matrix)
lapply(x,
function(xx) lapply(y[!y == xx],
function(yy) adjset_support_from_dags_pairwise(adjset, dags, w, xx, yy, dmats)))
}
adjset_support_from_dags_pairwise <- function(adjset,
dags,
w,
x,
y,
dmats,
replace_large_adjset = NULL) {
n    <- ncol(dags[[1]])
if (adjset == "pa") {
sets <- lapply(dags, function(dag) seq_len(n)[dag[, x] == 1])
} else {
yIsDescendant <- vapply(dmats, function(m) m[[x+n*(y-1)]], numeric(1)) == 1
if (!any(yIsDescendant)) {
# set (unique) adjustment set equal to y, indicating no effect from x to y
sets <- list(y)
w    <- 1
} else {
# list adjustment sets in DAGs where y is descendant of x
tmp  <- mapply(function(dag, dmat) adjset::find_adjset(dag, x-1, y-1, adjset, dmat)+1,
dag = dags[yIsDescendant],
dmat = dmats[yIsDescendant],
SIMPLIFY = FALSE)
sets <- c(list(y), tmp)
w    <- c(sum(w[!yIsDescendant]), w[yIsDescendant])
}
}
adjset_support  <- frequency_table(sets, w)
if (!is.null(replace_large_adjset)) {
sets <- lapply(adjset_support[[1]], function(z) replace_large_adjset(x, y, z, adjset))
adjset_support <- frequency_table(sets, adjset_support[[2]])
}
return(adjset_support)
}
#' @rdname adjset_support_from_dags
dag_support <- function(dags, w = rep(1/length(dags), length(dags))) {
frequency_table(lapply(dags, as.matrix), w)
}
frequency_table <- function(x, w = rep(1/length(x), length(x))) {
u <- unique(x)
list(x = u, w = bida:::rowsum_fast(w, x, u))
}
find_sets_implying_zeroeff <- function(setsupp, y) {
if (!is.null(setsupp$zeroprob)) return(setsupp)
sets <- setsupp$sets
p    <- setsupp$p
indx <- vapply(sets, any(sets == y), logical(1))
if (any(indx)) {
zeroprob  = sum(p[indx])
list(sets = list(y, sets[!indx]),
p = c(zeroprob, p[!indx]),
zeroprob = zeroprob)
} else {
c(setsupp, zeroprob = list(0))
}
}
files <- list.files("./MCMC/", "alarm", full.names = T)
f <- files[1]
imp <- readRDS(f)
files
