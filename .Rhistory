rm(list = c("areAncestors", "areDescendants", "areReachable", "find_adjset", "find_nearest_adjset", "isChild", "isDescendant", "isParent"))
document()
load_all()
adjsets <- c("o", "o-min", "pa-min", "pa", "pa-if")
n <- 20
ngraphs <- 5
verbose <- T
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
pa <- unname(which(dag[, x] == 1))
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
sets <- lapply(adjsets, function(a) find_adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
expect_equal(sets$pa, pa)
sets$pa <- NULL
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
}
}
}
}
sets
find_adjset(dag, x-1, y-1, "o", dmat)
dim(dmat)
dim(dag)
find_adjset(dag, x-1, y-1, "o", dmat, Gx)
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
load_all()
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
areDescendants(dag, x)
areDescendants(dag, x-1)
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
find_adjset(dag, x-1, y-1, "o", dmat)
find_adjset(dag, x-1, y-1, "pa")
find_adjset(dag, x-1, y-1, "pa", dmat)
find_adjset(dag, x-1, y-1, "pa-if", dmat)
find_adjset(dag, x-1, y-1, "pa-min", dmat)
document()
load_all()
find_adjset(dag, x-1, y-1, "pa-min", dmat)
document()
find_adjset(dag, x-1, y-1, "pa-min", dmat)
load_all()
find_adjset(dag, x-1, y-1, "pa-min", dmat)
document()
document()
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "pa-min", dmat)
adjsets <- c("o", "o-min", "pa-min", "pa", "pa-if")
n <- 20
ngraphs <- 5
verbose <- T
g
g <- 3
x
y
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
pa <- unname(which(dag[, x] == 1))
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
sets <- lapply(adjsets, function(a) find_adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
expect_equal(sets$pa, pa)
sets$pa <- NULL
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
}
}
}
}
find_adjset(dag, x-1, y-1, "pa-min", dmat)
Rcpp::sourceCpp("src/find_adjset.cpp")
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
pa <- unname(which(dag[, x] == 1))
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
sets <- lapply(adjsets, function(a) find_adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
expect_equal(sets$pa, pa)
sets$pa <- NULL
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
}
}
}
}
find_adjset(dag, x-1, y-1, "pa-min", dmat)
find_adjset(dag, x-1, y-1, "pa-min", dmat)
Rcpp::sourceCpp("src/find_adjset.cpp")
dag
find_adjset(dag, x-1, y-1, "pa-min")
find_adjset(dag, x-1, y-1, "pa")
find_adjset(dag, x-1, y-1, "o")
dmat[x, y]
x
y
Rcpp::sourceCpp("src/find_adjset.cpp")
dmat[x, y]
find_adjset(dag, x-1, y-1, "o")
find_adjset(dag, x-1, y-1, "o", dmat)
dmat[1, ]
dmat[x, ]
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "o", dmat)
y
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "o", dmat)
matrix(0)
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "o", dmat)
document()
Rcpp::sourceCpp("src/find_adjset.cpp")
Rcpp::sourceCpp("src/find_adjset.cpp")
document()
rm(list = c("areAncestors", "areDescendants", "areReachable", "find_adjset", "find_nearest_adjset", "isChild", "isDescendant", "isParent"))
load_all()
adjsets <- c("o", "o-min", "pa-min", "pa", "pa-if")
n <- 20
ngraphs <- 5
verbose <- T
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
pa <- unname(which(dag[, x] == 1))
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
sets <- lapply(adjsets, function(a) find_adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
expect_equal(sets$pa, pa)
sets$pa <- NULL
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
}
}
}
}
find_adjset(dag, x-1, y-1, "o")
find_adjset(dag, x-1, y-1, "o", dmat)
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
find_adjset(dag, x-1, y-1, "o", dmat)
find_adjset(dag, x-1, y-1, "o")
Rcpp::sourceCpp("src/find_adjset.cpp")
Rcpp::sourceCpp("src/find_adjset.cpp")
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "o")
areDescendants(G, x)
areDescendants(dag, x)
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "o")
find_adjset(dag, x-1, y-1, "o", dmat)
find_adjset(dag, x-1, y-1, "o", dmat, dag)
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
document()
Rcpp::sourceCpp("src/find_adjset.cpp")
Rcpp::sourceCpp("src/find_adjset.cpp")
Rcpp::sourceCpp("src/find_adjset.cpp")
Rcpp::sourceCpp("src/find_adjset.cpp")
find_adjset(dag, x-1, y-1, "o", dmat, bdag)
find_adjset(dag, x-1, y-1, "a", dmat, bdag)
Rcpp::sourceCpp("src/find_adjset.cpp")
document()
load_all
load_all()
rm(list = c("areAncestors", "areDescendants", "areReachable", "find_adjset", "find_nearest_adjset", "isChild", "isDescendant", "isParent"))
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
sets <- lapply(adjsets, function(a) find_adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
expect_equal(sets$pa, pa)
sets$pa <- NULL
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
}
}
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
pa <- unname(which(dag[, x] == 1))
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
sets <- lapply(adjsets, function(a) find_adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
expect_equal(sets$pa, pa)
sets$pa <- NULL
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
find_adjset(dag, x-1, y-1, "o")
}
}
}
}
}
build()
check()
library(boot)
check()
?find_adjset
document()
document()
