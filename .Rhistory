warning = FALSE,
results = "hold"
)
library(pcalg)
library(bida)
library(ggplot2)
library(dplyr)
dag <- cbind(x1 = c(0, 0, 0, 0),
x2 = c(1, 0, 0, 0),
x3 = c(1, 1, 0, 1),
x4 = c(0, 0, 0, 0))
rownames(dag) <- colnames(dag)
# construct graph objects
g <- as(dag, "graphNEL")
gcp <- pcalg::dag2cpdag(g)
Rgraphviz::plot(g, main = "DAG")
Rgraphviz::plot(gcp, main = "CPDAG")
# draw a set of CPTs
set.seed(007)
n <- ncol(dag)
nlev <- setNames(rep(3, n), colnames(dag))
lev  <- lapply(nlev-1, seq.int, from = 0)
#cpts <- setNames(bida:::rand_cpts(dag, nlev, alpha = .75), colnames(dag))
#cpts <- rand_cpt_arrays(dag, nlev = 3, alpha = .33)
cpts <- bida:::rand_cpt_arrays(dag, nlev, alpha = .75)
tmp <- cbind(rep(1/3, 3),
c(.8, .1, .1),
c(.1, .3, .6))
cpts[[1]][] <- array(rep(1/3, 3), nlev[1], lev[1]) #c(.5, .3, .2)  # adjust distribution of root node
cpts[[2]] <- tmp
dimnames(cpts[[2]]) <- lev[(2:1)]
pa <- which(dag[, 3] == 1)
cpts[[4]][] <- array(rep(1/3, 3), nlev[4], lev[4])
lapply(cpts, sum)
g <- as(dag, "graphNEL")
gcp <- pcalg::dag2cpdag(g)
Rgraphviz::plot(g, main = "DAG")
Rgraphviz::plot(gcp, main = "CPDAG")
# construct graph objects
g <- as(dag, "graphNEL")
gcp <- pcalg::dag2cpdag(g)
Rgraphviz::plot(g, main = "DAG")
Rgraphviz::plot(gcp, main = "CPDAG")
# draw a set of CPTs
set.seed(007)
n <- ncol(dag)
nlev <- setNames(rep(3, n), colnames(dag))
lev  <- lapply(nlev-1, seq.int, from = 0)
#cpts <- setNames(bida:::rand_cpts(dag, nlev, alpha = .75), colnames(dag))
#cpts <- rand_cpt_arrays(dag, nlev = 3, alpha = .33)
cpts <- bida:::rand_cpt_arrays(dag, nlev, alpha = .75)
tmp <- cbind(rep(1/3, 3),
c(.8, .1, .1),
c(.1, .3, .6))
cpts[[1]][] <- array(rep(1/3, 3), nlev[1], lev[1]) #c(.5, .3, .2)  # adjust distribution of root node
cpts[[2]] <- tmp
dimnames(cpts[[2]]) <- lev[(2:1)]
pa <- which(dag[, 3] == 1)
cpts[[4]][] <- array(rep(1/3, 3), nlev[4], lev[4])
lapply(cpts, sum)
# draw a set of CPTs
set.seed(007)
n <- ncol(dag)
nlev <- setNames(rep(2, n), colnames(dag))
lev  <- lapply(nlev-1, seq.int, from = 0)
#cpts <- setNames(bida:::rand_cpts(dag, nlev, alpha = .75), colnames(dag))
#cpts <- rand_cpt_arrays(dag, nlev = 3, alpha = .33)
#cpts <- rand_cpt_arrays(dag, nlev, alpha = .75)
cpts[[1]] <- c(.33, 1-.33) # adjust distribution of root node
pa <- 1
cpts[[2]] <- array(c(.1, .9, .9, .1), nlev[c(2, pa)], lev[c(2, pa)])
pa <- which(dag[, 3] == 1)
tmp <- c(c(.1, .9, .7, .3),
c(.05, .95, .95, .05),
c(.15, .85,  .85, .15),
c(.3, .7, .9, .1))
cpts[[3]] <- array(tmp, nlev[c(3, pa)], lev[c(3, pa)])
cpts[[4]] <- array(c(.5, .5), nlev[4], lev[4])
vapply(cpts, sum, numeric(1))
cpquery_from_cpt_arrays(cpts, 2, 1)
load_all()
load_all()
library(devtools)
install.packages(c("cli", "colorspace", "Rcpp", "RcppArmadillo", "rlang", "robustbase"))
install.packages("devtools")
install.packages("curl")
setwd("~/Documents/git/adjset")
document()
devtools::document()
adjsets <- c("o", "o-min", "pa-min", "pa", "anc")
n <- 10
ngraphs <- 10
verbose <- T
adjset_from_dag <- function(adjset, dag, dmat, x, y, anc, sets = NULL) {
if (!is.null(sets[[adjset]])) {
return(sets[[adjset]])
} else if (dmat[x, y] == 0 && adjset %in% c("o", "o_min", "pa_min")) {
return(y)
} else {
bdag <- dag
bdag[x, ] <- 0
# find adjustment set
z <- switch(adjset,
"o" = {
z0 <- seq_along(anc)[anc][dmat[x, anc] == 0]
find_nearest_adjset(bdag, y-1, z0-1, anc) +1
}, "o_min" = {
z0 <- adjset_from_bdag("o",  bdag, dmat, x, y, anc, sets)
find_nearest_adjset(bdag, dmat, x-1, anc, z0-1) +1
}, "pa_min" = {
z0 <- seq_along(anc)[bdag[, x] == 1]
find_nearest_adjset(bdag, dmat, y-1, anc, z0-1) +1
}, "anc" = seq_along(anc)[anc][dmat[x, anc] == 0],
seq_along(anc)[bdag[, x] == 1]) # nomatch: return parent set
return(as.integer(z))
}
}
g <- 1
x <- 3
y <-
2
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$anc,
unname(which(replace(dmat[, x] | dmat[, y] & !dmat[x, ],  x, FALSE))))
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
adjset(dag, x-1, y-1, "o")
adjset_from_dag("o", dag, dmat, x, y, dmat[, x] | dmat[, y])
}
}
}
}
}
library(devtools)
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$anc,
unname(which(replace(dmat[, x] | dmat[, y] & !dmat[x, ],  x, FALSE))))
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
adjset(dag, x-1, y-1, "o")
adjset_from_dag("o", dag, dmat, x, y, dmat[, x] | dmat[, y])
}
}
}
}
}
library(testthat)
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$anc,
unname(which(replace(dmat[, x] | dmat[, y] & !dmat[x, ],  x, FALSE))))
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
adjset(dag, x-1, y-1, "o")
adjset_from_dag("o", dag, dmat, x, y, dmat[, x] | dmat[, y])
}
}
}
}
}
# specify DAG row-wise:
dag <- rbind(Z1  = c(0, 0, 0, 1, 0, 0, 0),
Z2  = c(0, 0, 0, 1, 0, 0, 0),
L   = c(0, 1, 0, 0, 1, 0, 0),
X   = c(0, 0, 0, 0, 1, 0, 0),
M   = c(0, 0, 0, 0, 0, 1, 0),
Y   = c(0, 0, 0, 0, 0, 0, 0),
U   = c(0, 0, 0, 0, 0, 1, 0))
colnames(dag) <- rownames(dag)
# compute adjustment set w.r.t. X and Y
x <- 4-1
y <- 6-1
bdag <- dag
bdag[x+1, ] <- 0
areDescendants(dag, x)
A <- areAncestors(dag, x) | areAncestors(dag, y)
Z0 <- which(A & !areDescendants(dag, x))-1
areAncestors(dag, Z0)
areReachable(bdag, y, Z0, A)
colnames(dag)[Z0[areReachable(bdag, y, Z0, A)[Z0+1]]+1]
find_nearest_adjset(dag, y, Z0, A)
o <- find_nearest_adjset(dag, y, Z0, A)
find_nearest_adjset(dag, x, o, A)
adjset(dag, y, x, "o")
find_nearest_adjset(dag, y, Z0, A)
bdag <- dag
bdag[x+1, ] <- 0
areDescendants(dag, x)
A <- areAncestors(dag, x) | areAncestors(dag, y)
Z0 <- which(A & !areDescendants(dag, x))-1
areAncestors(dag, Z0)
areReachable(bdag, y, Z0, A)
colnames(dag)[Z0[areReachable(bdag, y, Z0, A)[Z0+1]]+1]
find_nearest_adjset(dag, y, Z0, A)
find_nearest_adjset(dag, y, Z0, A)
find_nearest_adjset(dag, x, o, A)
adjset(dag, y, x, "o")
areReachable(bdag, y, c(0, 1), A)
adjset <- function(name) {
index <- find_adjset(dag, x, y, name)
colnames(dag)[index+1]
}
adjset("anc")
adjset("pa")
adjset(dag, y, x, "o-min")
document()
rm(list = c("adjset"))
find_nearest_adjset(dag, x, o, A)
adjset(dag, y, x, "o-min")
x <- 4-1
y <- 6-1
bdag <- dag
bdag[x+1, ] <- 0
areDescendants(dag, x)
A <- areAncestors(dag, x) | areAncestors(dag, y)
Z0 <- which(A & !areDescendants(dag, x))-1
areAncestors(dag, Z0)
areAncestors(dag, x) | areAncestors(dag, y)
areReachable(bdag, y, Z0, A)
colnames(dag)[Z0[areReachable(bdag, y, Z0, A)[Z0+1]]+1]
find_nearest_adjset(dag, z, Z0, A)
find_nearest_adjset(dag, y, Z0, A)
find_nearest_adjset(dag, x, Z0, A)
adjset(dag, y, x, "o-min")
find_nearest_adjset(dag, y, Z0, A)
find_nearest_adjset(dag, x, find_nearest_adjset(dag, x, Z0, A), A)
adjset(dag, y, x, "o-min")
areDescendants(dag, x)
areDescendants(dag, x)[y+1]
y
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
sets
x <- x+1
y <- y+2
y <- y-1
x
y
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
sets
for (g in 1:ngraphs){
set.seed(g)
dag <- as(pcalg::randDAG(n, 3, weighted = FALSE), "matrix")
colnames(dag) <- rownames(dag) <- paste0("X", seq_len(n))
dmat  <- sign(round(solve(diag(n)-dag), 1))
tdag <- t(dag)
#pcalg::plot(as(dag, "graphNEL"))
for (x in 1:n){
for (y in seq_len(n)[-x]){
if (verbose) cat("\n dag:", g, "x:", x, "y:", y)
adjsets <- c("anc", "o", "o-min", "pa-if", "pa-min")
sets <- lapply(adjsets, function(a) adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
if (dmat[x, y] == 0) {
expect_equal(unique(sets), list(y))
} else {
expect_equal(sets$anc,
unname(which(replace(dmat[, x] | dmat[, y] & !dmat[x, ],  x, FALSE))))
expect_equal(sets$o, sort(pcalg::optAdjSet(tdag, x, y)))
expect_equal(sets$`pa-if`, unname(which(dag[, x] == 1)))
# compute all minimum sets
min <- pcalg::adjustment(tdag, "dag", x, y, "minimal")
# loop through all minimal sets and compare with minimal o/pa
o_equal <- pa_equal <- FALSE
for (z in min) {
z <- sort(z)
if (!o_equal)  o_equal <- length(sets$`o-min`) == length(z) && all(sets$`o-min`== z)
if (!pa_equal) pa_equal <- length(sets$`pa-min`) == length(z) && all(sets$`pa-min` == z)
if (o_equal && pa_equal) break
}
expect_true(o_equal)
expect_true(pa_equal)
if (FALSE) {  # debugging
# plot each adjustment set
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(graph::graphAM(dag, edgemode = "directed"),
nodeAttrs = list(fillcolor = tmp),
main = a)
}
bdag <- dag
bdag[x, ] <- 0
Z0 <- sets$anc
cat("\nZ0")
Z0-1
cat("\nAncestors of Z0")
which(areAncestors(bdag, Z0-1))-1
cat("\nNodes in Z0 reachable from y")
Z0[areReachable(bdag, y-1, Z0-1, dmat[, x] | dmat[, y])[Z0]]
find_nearest_adjset(bdag, y-1, sets$anc-1, dmat[, x] | dmat[, y])+1
adjset(dag, x-1, y-1, "o")
adjset_from_dag("o", dag, dmat, x, y, dmat[, x] | dmat[, y])
}
}
}
}
}
use_vignette()
# specify DAG row-wise:
dag <- rbind(Z1  = c(0, 0, 0, 1, 0, 0, 0),
Z2  = c(0, 0, 0, 1, 0, 0, 0),
L   = c(0, 1, 0, 0, 1, 0, 0),
X   = c(0, 0, 0, 0, 1, 0, 0),
M   = c(0, 0, 0, 0, 0, 1, 0),
Y   = c(0, 0, 0, 0, 0, 0, 0),
U   = c(0, 0, 0, 0, 0, 1, 0))
dag2 <- dag
colnames(dag) <- rownames(dag)
# compute adjustment set w.r.t. X and Y
x <- 4
y <- 6
adjsets <- c("anc", "pa","pa-min", "o", "o-min")
sets <- lapply(adjsets,
function(a) find_adjset(dag, x-1, y-1, a, checkIfDescendant = TRUE)+1)
# specify DAG row-wise:
dag <- rbind(Z1  = c(0, 0, 0, 1, 0, 0, 0),
Z2  = c(0, 0, 0, 1, 0, 0, 0),
L   = c(0, 1, 0, 0, 1, 0, 0),
X   = c(0, 0, 0, 0, 1, 0, 0),
M   = c(0, 0, 0, 0, 0, 1, 0),
Y   = c(0, 0, 0, 0, 0, 0, 0),
U   = c(0, 0, 0, 0, 0, 1, 0))
dag2 <- dag
colnames(dag) <- rownames(dag)
# compute adjustment set w.r.t. X and Y
x <- 4
y <- 6
adjsets <- c("anc", "pa","pa-min", "o", "o-min")
sets <- lapply(adjsets,
function(a) adjset(dag, x-1, y-1, a)+1)
names(sets) <- adjsets
# plot each adjustment set
g <- graph::graphAM(dag, edgemode = "directed")
color <- c("grey", "lightblue",  "blue", "pink", "red")
names(color) <- adjsets
par(mfrow = c(1, 5),
mar = c(5, 1, .1, .1))
for (a in names(sets)) {
z <- sets[[a]]
tmp <- rep(color[a], length(z))
names(tmp) <- colnames(dag)[z]
Rgraphviz::plot(g,
nodeAttrs = list(fillcolor = tmp),
main = a)
}
